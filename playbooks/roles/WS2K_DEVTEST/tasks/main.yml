- name: Ping hosts
  ansible.windows.win_ping:

- name: Update Windows
  ansible.windows.win_updates:
   category_names: '*'
   reboot: yes
   reboot_timeout: 3600

- name: Change hostname
  ansible.windows.win_hostname:
   name: "{{ new_hostname }}"
  register: hostname

- name: Reboot after hostname change
  ansible.windows.win_reboot:
  when: hostname.reboot_required

- name: Disable IPv6 on all interfaces
  community.windows.win_net_adapter_feature:
   interface: '*'
   component_id:
    - ms_tcpip6
- name: Get disk facts
  community.windows.win_disk_facts:

- name: Get partition percentage
  debug:
    msg: '{{ disksize_gib }}'
  vars:
    # Get first system disk
    disk: '{{ ansible_facts.disks|selectattr("system_disk")|first }}'

    # Show disk size in Gibibytes
    disksize_gib: '{{ (disk.size/4*3/1024|pow(3))|round|int }} GiB'

- name: Perform partitions if there's only one disk
  community.windows.win_partition:
   drive_letter: E
   parition_size: '{{ disksize_gib }}'
   disk_number: 1
  when: ansible_facts.disks[1] == "VARIABLE IS NOT DEFINED!"

- name: Enable second disk if exists
  community.windows.win_initialize_disk:
   style: gpt
   disk_number: 1
  when: ansible_facts.disks[1] != "VARIABLE IS NOT DEFINED!"

- name: Create volume on second disk
  community.windows.win_partition:
   drive_letter: E
   partition_size: -1
   disk_number: 1
  when: ansible_facts.disks[1] != "VARIABLE IS NOT DEFINED!"

- name: Set disk format on new volume
  community.windows.win_format:
   drive_letter: E
   file_system: NTFS
   new_label: DATOS

- name: Install Windows Server IIS features
  ansible.windows.win_feature:
   name: Web-Server
   state: present
   include_sub_features: yes
   include_management_tools: yes
  register: win_feature

- name: Install Windows Server WCF Services features
  ansible.windows.win_feature:
   name: NET-WCF-Services45
   include_sub_features: yes
   state: present

- name: Install OpenSSH service
  chocolatey.chocolatey.win_chocolatey:
   name: openssh
   package_params: /SSHServerFeature
   state: present 

- name: Configure OpenSSH server
  ansible.builtin.win_regedit:
   path: HKLM:\SOFTWARE\OpenSSH
   name: DefaultShell
   data: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
   type: string
   state: present

- name: Install required packages
  chocolatey.chocolatey.win_chocolatey:
   name: "{{ required_packages }}"
   state: present

- name: Disable completely Windows firewall
  community.windows.win_firewall:
   state: disabled
   profiles:
    - Domain
    - Private
    - Public
  tags: disable_firewall

- name: Enable RDP sessions
  ansible.builtin.win_regedit:
   path: 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server'
   name: fDenyTSConnections
   data: 0
   type: dword

- name: Install MS SQL Server Express 2017
  chocolatey.chocolatey.win_chocolatey:
   name: sql-server-2017
   version: '14.0.1000'
   state: present

- name: Install SQL Server Management Studio
  chocolatey.chocolatey.win_chocolatey:
   name: sql-server-management-studio
   version: '15.0.18390.0'
   state: present

- name: Install SqlServer-Powershell extension
  ansible.windows.win_powershell:
   script: |
    Install-Module -Name SqlServer -AllowClobber

#- name: Test connectivity
#  community.general.mssql_script:
#   login_user: ansible
#   login_password: P@ssword0
#   login_host: WIN-123
#   login_port: 1443
#   db: SQLEXPRESS
#   script: "SELECT 1"

#- name: Test connectivity
#  ansible.windows.win_powershell:
#   script: |
#     $User = "hmi"
#     $PWord = ConvertTo-SecureString -String "hmi"-AsPlainText -Force
#     $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $User, $PWord
#     Add-SqlLogin -ServerInstance WIN-123\SQLEXPRESS -LoginType SqlLogin -LoginName hmi -LoginPSCredential $Credential -Enable -GrantConnectSql
